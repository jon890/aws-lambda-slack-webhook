---
description: 
globs: 
alwaysApply: true
---
# AWS Lambda Slack Webhook 프로젝트 규칙

## 프로젝트 개요
- 이 프로젝트는 AWS Lambda를 사용하여 외부 요청을 받아 Slack 웹훅으로 전송하는 TypeScript 애플리케이션입니다.
- API Gateway -> Lambda 프록시 통합으로 사용됩니다.
- 여러 이벤트 타입(샵바이 주문, 샵바이 주문 상태 변경, Cafe24 주문)을 지원합니다.

## 코드 스타일 가이드

### 타입 정의
- 기본적으로 `type`을 사용합니다. 확장이 필요한 경우에만 `interface`를 사용합니다.
- 타입 이름은 파스칼 케이스(PascalCase)로 작성합니다.
- 주석은 코드를 이해하기 어려운 특별한 상황인 경우에만 사용합니다.
- 타입 파일은 기본적으로 `src/types/**.d.ts`로 작성합니다.
- HTTP 통신을 위해서는 axios 라이브러리를 사용하지 않고, fetch를 사용합니다.

### 파일 구조
- 타입은 도메인별로 분리하여 `.d.ts` 파일로 관리합니다.
- 배럴 파일(index.ts)을 사용하지 않고 각 모듈을 직접 임포트합니다.
- 파서 로직은 `src/parser` 디렉토리에 이벤트 타입별로 분리합니다.

### 환경 변수 관리
- 환경 변수는 `envUtils.ts` 파일의 유틸리티 함수를 통해 접근합니다.
- 환경 변수 접근 시 직접 `process.env`를 사용하지 않습니다.
- AWS Lambda 콘솔에서 환경 변수를 설정합니다.

### 프로젝트 구조
- `src/types`: 타입 정의 (파일 확장자는 `.d.ts` 사용)
  - `order.d.ts`: 주문 관련 타입
  - `orderStatus.d.ts`: 주문 상태 변경 관련 타입
  - `slack.d.ts`: Slack 메시지 관련 타입
  - `cafe24.d.ts`: Cafe24 관련 타입
  - `lambda.d.ts`: Lambda 응답 관련 타입
- `src/parser`: 이벤트 파서 함수 (이벤트 데이터를 Slack 메시지로 변환)
  - `formatUtils.ts`: 공통 형식 변환 유틸리티
  - `orderEventParser.ts`: 주문 이벤트 파서
  - `orderStatusChangeParser.ts`: 주문 상태 변경 이벤트 파서
  - `cafe24OrderParser.ts`: Cafe24 주문 이벤트 파서
- `src/services`: 서비스 클래스 (SlackService)
- `src/utils`: 유틸리티 함수
  - `envUtils.ts`: 환경 변수 관리
  - `responseUtils.ts`: API 응답 생성
  - `eventTypeParser.ts`: 이벤트 타입 파싱 및 파서 매핑
- `src/index.ts`: AWS Lambda 핸들러 함수

### 이벤트 타입과 파서 관리

이벤트 타입과 파서 함수는 `eventTypeParser.ts`에서 중앙 관리합니다:

```typescript
// 이벤트 타입 상수
export const EVENT_TYPES = {
  CREATE_ORDER: "CREATE_ORDER",
  ORDER_STATUS_CHANGE: "ORDER_STATUS_CHANGE",
  CAFE24_ORDER: "CAFE24_ORDER",
} as const;

// 이벤트 타입별 데이터 타입 정의
export type EventData = {
  [EVENT_TYPES.CREATE_ORDER]: OrderEventData;
  [EVENT_TYPES.ORDER_STATUS_CHANGE]: OrderStatusChangeData[];
  [EVENT_TYPES.CAFE24_ORDER]: Cafe24OrderEventData;
};

// 이벤트 타입별 파서 함수 매핑
export const EVENT_PARSERS = {
  [EVENT_TYPES.CREATE_ORDER]: parseOrderEvent,
  [EVENT_TYPES.ORDER_STATUS_CHANGE]: (data: OrderStatusChangeData[]) => {
    return parseOrderStatusChange(data[0]);
  },
  [EVENT_TYPES.CAFE24_ORDER]: parseCafe24Order,
} as const;

// 이벤트 타입에 맞는 파서 함수를 가져오는 함수
export function getParserForEventType<T extends EventType>(type: T): EventParser<T> {
  return EVENT_PARSERS[type] as EventParser<T>;
}
```

#### 새로운 이벤트 타입 추가 방법

1. `types` 디렉토리에 새 이벤트 타입에 대한 타입 정의 추가
2. `parser` 디렉토리에 새 이벤트 파서 함수 추가
3. `eventTypeParser.ts`에서 이벤트 타입, 데이터 타입, 파서 함수 매핑 추가

### AWS Lambda 배포
- AWS Lambda 콘솔에서는 다음 환경 변수를 설정해야 합니다:
  - `SLACK_WEBHOOK_URL`: Slack 웹훅 URL (필수)
  - `ORDER_CREATION_WEBHOOK_URL`: 주문 생성 채널 Slack 웹훅 URL
  - `ORDER_STATUS_CHANGE_WEBHOOK_URL`: 주문 상태 변경 채널 Slack 웹훅 URL
  - `NODE_ENV`: production

### 이벤트 타입 전달 방식
- 이벤트 타입은 쿼리 파라미터로 전달합니다: `?eventType=CREATE_ORDER`
- 지원하는 이벤트 타입: `CREATE_ORDER`, `ORDER_STATUS_CHANGE`, `CAFE24_ORDER`

### 개발 워크플로우
1. 의존성 설치: `pnpm install`
2. 개발 모드 실행: `pnpm dev`
3. 빌드: `pnpm build`
4. 배포 패키지 생성: `pnpm zip`

### 오류 처리
- 모든 API 엔드포인트에서 try-catch 블록 사용
- 오류 발생 시 적절한 HTTP 상태 코드와 메시지 반환
- 로깅을 통한 디버깅 정보 제공

### 비동기 코드
- Promise 기반 비동기 코드 작성
- async/await 사용
- 네트워크 요청 시 예외 처리 필수

## 패키지 관리
- 패키지 매니저로 `pnpm`을 사용합니다.
- 의존성 추가: `pnpm add [패키지명]`
- 개발 의존성 추가: `pnpm add -D [패키지명]`

### Cafe24 데이터 처리 규칙

#### 결제 수단 파싱
- Cafe24에서 전달되는 `payment_method` 필드는 쉼표로 구분된 문자열로 처리합니다. (예: "cash,point,coupon")
- 각 결제 수단 코드는 다음과 같이 한글로 변환합니다:
  - cash: 무통장
  - card: 신용카드
  - cell: 휴대폰
  - tcash: 계좌이체
  - prepaid: 선불금
  - credit: 예치금
  - point: 적립금
  - pointfy: 통합포인트
  - cvs: 편의점
  - cod: 후불
  - coupon: 쿠폰
  - market_discount: 마켓할인
  - etc: 기타
- 여러 결제 수단을 사용한 경우 쉼표(", ")로 연결하여 표시합니다.

#### 날짜 및 시간 처리
- 날짜 문자열은 ISO 8601 형식으로 전달됩니다. (예: "2020-07-17T15:28:14+09:00")
- `formatDateString` 함수를 사용하여 "YYYY-MM-DD HH:MM" 형식으로 변환합니다.
- 한국 시간대(KST)로 정확히 표시되도록 구현합니다.

#### Boolean 값 처리
- Cafe24 웹훅에서는 Boolean 값이 문자열 "T"(true) 또는 "F"(false)로 전달됩니다.
- 이러한 값들은 `Cafe24Boolean` 타입(`"T" | "F"`)으로 정의합니다.
- 주요 Boolean 필드:
  - `paid`: 결제 완료 여부 ("T"/"F")
  - `first_order`: 첫 주문 여부 ("T"/"F")
  - `order_from_mobile`: 모바일 주문 여부 ("T"/"F")
  - `use_escrow`: 에스크로 사용 여부 ("T"/"F")
  - `store_pickup`: 매장 픽업 여부 ("T"/"F")
- 코드에서 Boolean 값 확인 시 `===` 연산자를 사용하여 정확히 비교합니다:
  ```typescript
  const isFirstOrder = first_order === "T" ? "예" : "아니오";
  ```

#### 데이터 타입 정의
- 명확한 타입 안전성을 위해 다음과 같은 특수 타입들을 정의하여 사용합니다:
  - `Cafe24Boolean`: "T" 또는 "F" 값을 가지는 문자열 타입
  - `Cafe24DateString`: ISO 8601 형식의 날짜 문자열 타입 (예: "2020-07-17T15:28:14+09:00")
  - `Cafe24AmountString`: 숫자로 파싱 가능한 금액 문자열 타입 (예: "1000", "1500.50")
  - `Cafe24OrderPlaceName`: 주문 경로 타입 ("PC", "MOBILE_WEB", "MOBILE_APP", "SYNDICATION" 등)
  - `Cafe24ShippingStatus`: 배송 상태 타입 ("SHIPPING_READY", "DELIVERING", "SHIPPED_COMPLETE", "CANCELED" 등)
- 이러한 타입들을 사용함으로써 코드의 자동 완성 기능 지원 및 타입 오류를 사전에 방지합니다.


